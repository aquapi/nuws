require './bindings.nelua'

-- Describe a response
local response = uws_res_t
return response

function response:write(str: string): void <inline>
  uws_res_write(self, str.data, str.size)
end

-- End without body
function response:complete(close_conn: boolean): void <inline>
  uws_res_end_without_body(self, close_conn)
end

-- End with body
function response:finalize(str: string, close_conn: boolean): void <inline>
  uws_res_end(self, str.data, str.size, close_conn)
end

function response:cork(handler: function(res: *response): void): void <inline>
  uws_res_cork(self, handler)
end

function response:pause(): void <inline>
  uws_res_pause(self)
end

function response:resume(): void <inline>
  uws_res_resume(self)
end

function response:write_continue(): void <inline>
  uws_res_write_continue(self)
end

function response:write_status(str: string): void <inline>
  uws_res_write_status(self, str.data, str.size)
end

function response:has_responded(): boolean <inline>
  return uws_res_has_responded(self)
end

function response:write_header(key: string, value: overload(uinteger, string)): void <inline>
  ## if value.type.is_string then
    uws_res_write_header(self, key.data, key.size, value.data, value.size)
  ## else
    uws_res_write_header_int(self, key.data, key.size, value)
  ## end
end
