##[==[
local fs = require 'nelua.utils.fs'

-- Get file directory
local dir = fs.dirname(debug.getinfo(1).source:sub(2, -9))

linklib(fs.abspath('capi/libuwebsockets.so', dir))
cinclude(fs.abspath('capi/libuwebsockets.h', dir))
]==]

require './bindings.nelua'

-- App init
global App = @record {
  ptr: *uws_app_t,
  ssl: integer
}

function App.init(ssl: boolean): App
  local useSSL = ssl and 1 or 0
  local ptr: *uws_app_t = uws_create_app(useSSL)
  return (@App){ ptr, useSSL }
end

function App:deinit(): void
  uws_app_destroy(self.ssl, self.ptr)
end

function App:listen(port: integer, handler: uws_listen_handler, data: pointer): void
  uws_app_listen(self.ssl, self.ptr, port, handler, data)
  uws_app_run(self.ssl, self.ptr)
end

-- Methods
## local function defineMethod(method)
function App:#|method|#(path: string, handler: uws_method_handler, data: pointer): void
  #|'uws_app_' .. method|#(self.ssl, self.ptr, path, handler, data)
end
## end

## defineMethod('get')
## defineMethod('post')
## defineMethod('put')
## defineMethod('delete')
## defineMethod('patch')
## defineMethod('options')
## defineMethod('head')
## defineMethod('connect')
## defineMethod('trace')
## defineMethod('any')
